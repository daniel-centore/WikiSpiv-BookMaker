package com.wikispiv.bookmaker.ui;

import java.awt.Frame;
import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.DefaultListModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;

import com.wikispiv.bookmaker.Main;
import com.wikispiv.bookmaker.Utils;
import com.wikispiv.bookmaker.rendering.WSFont;

/**
 * THIS FILE MUST BE EDITED IN NETBEANS
 * 
 * @author dcentore
 */
public class FontPicker extends javax.swing.JDialog {
    
    private static final long serialVersionUID = 1L;
    
    private WSFont result = null;

    /**
     * Creates new form FontPicker
     */
    public FontPicker(java.awt.Frame parent, WSFont oldFont) {
        super(parent, true);
        initComponents();
        
        Collection<File> files = FileUtils.listFiles(WSFont.getFontDirectory(), new WildcardFileFilter("*.ttf"), null);
        List<String> fileNames = files.stream().map(f -> f.getName()).sorted().collect(Collectors.toList());
            
        DefaultListModel<String> model = new DefaultListModel<>();
        for (String s : fileNames) {
            model.addElement(s);
        }
        fontList.setModel(model);
        
        if (oldFont != null) {
            fontList.setSelectedValue(oldFont.getFilename(), true);
            fontSpinner.setValue(oldFont.getFontSize());
            spacingSpinner.setValue(oldFont.getLineSpacing());
            colorChooser.setColor(oldFont.getFontColor());
        }
        textArea.setText(Main.UKRAINIAN_PANGRAM);
    }
    
    public static WSFont showFontPicker(Frame parent, WSFont oldFont)
    {
        if (WSFont.getFontDirectory() == null) {
            Main.println("Save the spivanyk somewhere first");
            return null;
        }
        FontPicker picker = new FontPicker(parent, oldFont);
        picker.setVisible(true);
        return picker.getResult();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fontList = new javax.swing.JList<>();
        SpinnerNumberModel fontSpinnerModel = new SpinnerNumberModel(12, 1, Integer.MAX_VALUE, 0.1);
        fontSpinner = new JSpinner(fontSpinnerModel);
        jLabel1 = new javax.swing.JLabel();
        SpinnerNumberModel spacingSpinnerModel = new SpinnerNumberModel(1.0, 0, Integer.MAX_VALUE, 0.1);
        spacingSpinner = new JSpinner(spacingSpinnerModel);
        jLabel2 = new javax.swing.JLabel();
        previewPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        colorChooser = new javax.swing.JColorChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fontList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fontList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fontList);

        fontSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSpinnerStateChanged(evt);
            }
        });

        jLabel1.setText("Font size:");

        jLabel2.setText("Line spacing:");

        previewPane.setEnabled(false);

        textArea.setColumns(20);
        textArea.setRows(5);
        previewPane.setViewportView(textArea);

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Add *.ttf files to a 'Fonts' folder in the same directory as your active file");

        jLabel7.setText("Bold and Italics should be added as separate *.ttf files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(okBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fontSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(spacingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)
                                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previewPane)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fontSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(spacingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelBtn)
                            .addComponent(okBtn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        result = getCurrentSelection();
        
        setVisible(false);
    }//GEN-LAST:event_okBtnActionPerformed

    private void fontListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontListValueChanged
        somethingChanged();
    }//GEN-LAST:event_fontListValueChanged

    private void fontSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSpinnerStateChanged
        somethingChanged();
    }//GEN-LAST:event_fontSpinnerStateChanged
    
    private void somethingChanged()
    {
        textArea.setFont(getCurrentSelection().getGenericJavaFont());
    }
    
    private WSFont getCurrentSelection()
    {
        String fontName = fontList.getSelectedValue();
        return new WSFont(fontName, Utils.getDoubleValue(fontSpinner), Utils.getDoubleValue(spacingSpinner), colorChooser.getColor());
    }
    
    public WSFont getResult()
    {
        return this.result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JList<String> fontList;
    private javax.swing.JSpinner fontSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okBtn;
    private javax.swing.JScrollPane previewPane;
    private javax.swing.JSpinner spacingSpinner;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
